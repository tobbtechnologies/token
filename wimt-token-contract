pragma solidity ^0.4.21;

/**
 * Description: WIMSToken is a simple ERC20
 * title manager
 */
 
contract manager
{
    address public contractManager; //address to manage the token contract
	
	event NewContractManager(address newManagerAddress);

    constructor()public
	{
        contractManager = msg.sender; //address that creates contracts will manage it
    }

	/**
	* onlyManager restrict management operations to the manager of contract
	*/
    modifier onlyManager()
	{
        require(msg.sender == contractManager); 
        _;
    }
	/**
	* setNewContractManager set a new manager
	*/
    function setNewContractManager(address newManagerAddress) public onlyManager 
	{
		require(newManagerAddress != 0);
		
		emit NewContractManager(newManagerAddress);
		
        contractManager = newManagerAddress;
			
    }

}

/**
 * ERC20 comply with ERC20 standards
 */
contract ERC20
{

    mapping(address => uint256) public balanceOf;
	
    mapping(address => mapping(address => uint256)) public allowance;
	
    string public name;
	
    string public symbol;
	
    uint8 public decimal; 
	
    uint256 public totalSupply;

    event Transfer(address indexed from, address indexed to, uint256 value);
	
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor(uint256 initialSupply, string _name, string _symbol, uint8 _decimal) public
	{
		require(initialSupply >= 0);

		require(_decimal >= 0);
		
        balanceOf[msg.sender] = initialSupply;
		
        name = _name;
		
        symbol = _symbol;
		
        decimal = _decimal;
		
        totalSupply = initialSupply;
    }

    function transfer(address _to, uint256 _value)public returns (bool success)
	{
		require(_value >= 0);
		
		require(balanceOf[msg.sender] >= _value);
		
		require(balanceOf[_to] + _value >= balanceOf[_to]);

        balanceOf[msg.sender] -= _value;
		
        balanceOf[_to] += _value;
		
        emit Transfer(msg.sender, _to, _value);
		
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success)
	{
		require(_value >= 0); 
		
        allowance[msg.sender][_spender] = _value;
		
        emit Approval(msg.sender, _spender, _value);
		
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) 
	{
      return allowance[_owner][_spender];
    }
	
    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success)
	{
		require(_value >= 0); 
		
        require(balanceOf[_from] >= _value);
		
        require(balanceOf[_to] + _value >= balanceOf[_to]);
		
        require(_value <= allowance[_from][msg.sender]); 

        balanceOf[_from] -= _value;
		
        balanceOf[_to] += _value;
		
        allowance[_from][msg.sender] -= _value;
		
        emit Transfer(_from, _to, _value);

        return true;
    }

    function balanceOf(address _owner)public constant returns (uint256 balance) 
	{
        return balanceOf[_owner];
    }
}
/**
 * WIMT Token implements manager and ERC contracts
 */
contract WIMSToken is manager, ERC20
{
    constructor(uint256 initialSupply, string _name, string _symbol,uint8 _decimal, address _manager) public  ERC20(0, _name, _symbol, _decimal)
	{

        if(_manager != 0)
		{
            contractManager = _manager;
		}
        else
		{
            contractManager = msg.sender;
		}

        balanceOf[contractManager] = initialSupply;
		
        totalSupply = initialSupply;

    }

    function mintToken(address target, uint256 mintedAmount)public onlyManager 
	{
		require(target != 0);
		
		require(mintedAmount >= 0);
		
        balanceOf[target] += mintedAmount;
		
        totalSupply += mintedAmount;
		
        emit Transfer(0, this, mintedAmount);
		
        emit Transfer(this, target, mintedAmount);
    }

}
